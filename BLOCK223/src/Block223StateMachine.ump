class User
{
  username;

}

class UserRole
{
  password;
}

class Admin
{
  isA UserRole;
}

class Player
{
  Integer live;
isA UserRole;
}

class Game
{
  name;
  Integer nrBlocksPerLevel;
  Integer widthPlayArea;
  Integer heightPlayArea;
  Integer widthHallOfFame;
  Integer heightHallOfFame;
  Boolean isPublished;
Boolean isTested;
1 <@>- 1..99 Level;
  1 <@>- 1 Ball;
  * -- 0..1 Admin;
  1 <@>- 1 Paddle;
}

class Ball
{
  Integer minBallSpeedX;
  Integer minBallSpeedY;
  Double ballSpeedIncreaseFactor;
  Integer ballPositionX;
  Integer ballPositionY;
}

class Paddle
{
  Integer maxPaddleLength;
  Integer minPaddleLength;
  Integer paddlePositionX;
  Integer paddlePositionY;
}

class Level
{
  Boolean isRandom;
}

class BlockAssignment
{
  Integer gridHorizontalPosition;
  Integer gridVerticalPosition;
  * -- 1 Level;
  * -<@> 1 Game;
}

class Block
{
  Integer id;
  Integer red;
  Integer green;
  Integer blue;
  Integer points;
  * -<@> 1 Game;
  1 -- * BlockAssignment;
}

enum GameStatus {Idle, inGame, Paused, Ended }

class GameOccurence

{
   Status {
     
    Idle {
      
       startGame(Game currentGame) [isStartButtonPressed()] / {doStartGame(currentGame)} -> InGame;
      
    }
     
    InGame {
       
       removeBlock(BlockAssignment aBlock) [!blocksAlmostEmpty()]/ {doRemoveBlock(aBlock)} -> InGame;
       
       removeBlock(Block aBlock) [blocksAlmostEmpty()] / 
       {BlockAssignment aBlock = getBlockAssignment();
          doRemoveBlock(aBlock);} -> GameEnded;
         
       removeBlockFromLevel(Block aBlock) [levelBlocksAlmostEmpty()] /
       {BlockAssignment aBlock = getBlockAssignment();
          doRemoveBlock(aBlock);} -> Idle;
       
       removeLife(Player aLife) [lifesAlmostEmpty()] /
       {Player aLife = get
          doRemoveLife(aLife)} -> GameEnded;
       
       removeLife(Player aLife) [!lifesAlmostEmpty()] / {doRemoveLife(aLife)} -> Idle;
       
       
       pauseGame(Block223Application currentGame) / {doPauseGame(currentGame)} -> Paused;
        
       
     } 
        
    Paused{
      
        logOutFromGame(Block223Application currentGame) [isSpacebarPressed()] / 
       {Game currentGame = Block223Application.getCurrentGame(); 
          doLogOut(currentGame)} -> Idle;
        
        resumeGame(Block223Application currentGame) [isSpacebarPressed()] / 
        {Game currentGame = Block223Application.getCurrentGame();
         doResume(currentGame)} -> InGame;
   
    }
     
    GameEnded{
    }
     
   }
  
  GameStatus gameStatus;
  autounique gameId;
  Integer currentScore;
  isA Game;
  
  
       private boolean blocksAlmostEmpty(){
       return numberofBlocks() == 1;
       }
       
       private boolean lifesAlmostEmpty(){
       return numberofLifes() == 1;
       }
        
       private boolean isStartButtonPressed(){
       }
  
        private boolean isSpacebarPressed(){
       }
    
           
}


class Entry
{
  Integer finalScore;
  * -- 1 Game;
  * -- 1 Player;
}

