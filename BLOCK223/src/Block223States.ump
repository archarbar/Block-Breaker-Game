class PlayedGame {
	depend java.awt.geom.*;
	depend java.awt.geom.Ellipse2D;
	depend math.geom2d.conic.*;
	depend math.geom2d.*;
	depend java.awt.Point;
	depend ca.mcgill.ecse223.block.model.BouncePoint.BounceDirection;
	depend ca.mcgill.ecse223.block.application.Block223Application;
	

  // State Machine
  
  playStatus {
    Ready {
      entry / { doSetup(); }
      play -> Moving;
    }
    Moving {
      pause -> Paused;
      move [hitPaddle()] / { doHitPaddleOrWall(); } -> Moving;
      move [isOutOfBoundsAndLastLife()] / { doOutOfBounds(); } -> GameOver;
      move [isOutOfBounds()] / { doOutOfBounds(); } -> Paused;
      move [hitLastBlockAndLastLevel()] / { doHitBlock(); } -> GameOver;
      move [hitLastBlock()] / { doHitBlockNextLevel(); } -> Ready;
      move [hitBlock()] / { doHitBlock(); } -> Moving;
      move [hitWall()] / { doHitPaddleOrWall(); } -> Moving;
      move / { doHitNothingAndNotOutOfBounds(); } -> Moving;
    }
    Paused {
      play -> Moving;
    }
    GameOver {
      entry / { doGameOver(); }
    }
  }
  
  // Guards

  private boolean hitPaddle() {
   	BouncePoint bp = calculateBouncePointPaddle();
	if(bp != null) {
		setBounce(bp);
		return true;
	}
    return false;
  }
  
  private BouncePoint calculateBouncePointPaddle(){
    BouncePoint bouncePoint = null;
	   Point bouncePosition;
	   double ballRadius = 5.0;
	   double paddleHeight = 5.0;
	   double paddleLength = this.currentPaddleLength;
	   double paddleX = this.currentPaddleX;
	   double paddleY = this.currentPaddleY;
	   double xBall = this.currentBallX;
	   double yBall = this.currentBallY;
	   double xBallFuture = this.currentBallX + (this.ballDirectionX)*getWaitTime();
	   double yBallFuture = this.currentBallY + (this.ballDirectionY)*getWaitTime();
	   Rectangle2D.Double paddleRect = new Rectangle2D.Double(paddleX, paddleY, paddleLength, paddleHeight+ballRadius);
	   boolean intersect = paddleRect.intersectsLine(xBall, yBall, xBallFuture, yBallFuture);
	   if (!intersect) {
		   return bouncePoint;
	   }
	   else {
		   Ellipse2D.Double ellipseE = new Ellipse2D.Double(ballRadius, ballRadius, paddleX - ballRadius, paddleY - ballRadius );
		   Ellipse2D.Double ellipseF = new Ellipse2D.Double(ballRadius, ballRadius, paddleX + paddleLength + ballRadius, paddleY - ballRadius);
		   Line2D.Double lineA = new Line2D.Double(paddleX, paddleY, paddleX + paddleLength, paddleY);
		   Line2D.Double lineB = new Line2D.Double(paddleX - ballRadius, paddleY, paddleX - ballRadius, paddleY + ballRadius);
		   Line2D.Double lineC = new Line2D.Double(paddleX + paddleLength + ballRadius, paddleY, paddleX + paddleLength + ballRadius, paddleY + ballRadius);
		   Line2D.Double lineBallPath = new Line2D.Double(xBall, yBall, xBallFuture, yBallFuture);
		   if(lineA.intersectsLine(lineBallPath)) {
			   bouncePosition = getLineIntersection(lineBallPath, lineA);
			   bouncePoint = new BouncePoint(bouncePosition.getX(), bouncePosition.getY(), BounceDirection.FLIP_Y);
		   }
		   else if(lineB.intersectsLine(lineBallPath)){
			   bouncePosition = getLineIntersection(lineBallPath, lineB);
			   bouncePoint = new BouncePoint(bouncePosition.getX(), bouncePosition.getY(), BounceDirection.FLIP_X);
		   }
		   else if(lineC.intersectsLine(lineBallPath)) {
			   bouncePosition = getLineIntersection(lineBallPath, lineC);
			   bouncePoint = new BouncePoint(bouncePosition.getX(), bouncePosition.getY(), BounceDirection.FLIP_X);
		   }
		   else if(ellipseE.contains(xBallFuture, yBallFuture)) {
			   if(xBall < xBallFuture) {
				   bouncePoint = new BouncePoint(xBall, yBall, BounceDirection.FLIP_X);
			   }
			   else {
				   bouncePoint = new BouncePoint(xBall, yBall, BounceDirection.FLIP_Y);
			   }
		   }
		   else if(ellipseF.contains(xBallFuture, yBallFuture)) {
			   if(xBall < xBallFuture) {
				   bouncePoint = new BouncePoint(xBall, yBall, BounceDirection.FLIP_Y);
			   }
			   else {
				   bouncePoint = new BouncePoint(xBall, yBall, BounceDirection.FLIP_X);
			   }
		   }
	   }

	   return bouncePoint;
  }

  private double currentBlockLength;
  private double currentBlockHeight;
  private BouncePoint calculateBouncePointBlock(PlayedBlockAssignment block){
	   BouncePoint bouncePointBlock = null;
	   Point bouncePosition;
	   double ballRadius = Ball.BALL_DIAMETER/2;
	   double blockHeight = Block.SIZE;
	   double blockLength = Block.SIZE;
	   double blockX = this.currentBlockLength;
	   double blockY = this.currentBlockHeight;
	   double xBall = this.currentBallX;
	   double yBall = this.currentBallY;
	   double xBallFuture = this.currentBallX + (this.ballDirectionX)*getWaitTime();
	   double yBallFuture = this.currentBallY + (this.ballDirectionY)*getWaitTime();
	   Rectangle2D.Double blockRect = new Rectangle2D.Double(blockX, blockY, blockLength, blockHeight);
	   boolean intersect = blockRect.intersectsLine(xBall, yBall, xBallFuture, yBallFuture);
	   if(!intersect) {
		   return bouncePointBlock;
	   }
	   else{
		   Ellipse2D.Double ellipseTopLeftE = new Ellipse2D.Double(ballRadius, ballRadius, blockX - ballRadius, blockY - ballRadius);
		   Ellipse2D.Double ellipseBottomLeftG = new Ellipse2D.Double(ballRadius, ballRadius, blockX - ballRadius, blockY + blockHeight + ballRadius);
		   Ellipse2D.Double ellipseBottomRightH = new Ellipse2D.Double(ballRadius, ballRadius, blockX + blockLength + ballRadius, blockY + blockHeight + ballRadius);
		   Ellipse2D.Double ellipseTopRightF = new Ellipse2D.Double(ballRadius, ballRadius, blockX +blockLength + ballRadius, blockY - ballRadius);
		   Line2D.Double lineTop = new Line2D.Double(blockX - ballRadius, blockY - ballRadius, blockX + blockLength + ballRadius, blockY - ballRadius);
		   Line2D.Double lineLeft = new Line2D.Double(blockX - ballRadius, blockY - ballRadius, blockX - ballRadius, blockY + blockHeight + ballRadius);
		   Line2D.Double lineBottom = new Line2D.Double(blockX - ballRadius, blockY - blockHeight - ballRadius, blockX + blockLength + ballRadius, blockY - blockHeight - ballRadius);
		   Line2D.Double lineRight = new Line2D.Double(blockX + blockLength + ballRadius, blockY - ballRadius, blockX + blockLength + ballRadius, blockY + blockHeight + ballRadius);
		   Line2D.Double lineBallPath = new Line2D.Double(xBall, yBall, xBallFuture, yBallFuture);
		   if(lineTop.intersectsLine(lineBallPath)) {
			   bouncePosition = getLineIntersection(lineBallPath, lineTop);
			   bouncePointBlock = new BouncePoint(bouncePosition.getX(), bouncePosition.getY(), BounceDirection.FLIP_X);
		   }
		   else if(lineLeft.intersectsLine(lineBallPath)){
			   bouncePosition = getLineIntersection(lineBallPath, lineLeft);
			   bouncePointBlock = new BouncePoint(bouncePosition.getX(), bouncePosition.getY(), BounceDirection.FLIP_X);
		   }
		   else if(lineBottom.intersectsLine(lineBallPath)){
			   bouncePosition = getLineIntersection(lineBallPath, lineBottom);
			   bouncePointBlock = new BouncePoint(bouncePosition.getX(), bouncePosition.getY(), BounceDirection.FLIP_X);
		   }
		   else if(lineRight.intersectsLine(lineBallPath)){
			   bouncePosition = getLineIntersection(lineBallPath, lineRight);
			   bouncePointBlock = new BouncePoint(bouncePosition.getX(), bouncePosition.getY(), BounceDirection.FLIP_X);
		   }
		   else if(ellipseTopLeftE.contains(xBallFuture, yBallFuture)) {
			   if(xBall < xBallFuture) {
				   bouncePointBlock = new BouncePoint(xBall, yBall, BounceDirection.FLIP_X);
			   }
			   else {
				   bouncePointBlock = new BouncePoint(xBall, yBall, BounceDirection.FLIP_Y);
			   }
		   }
		   else if(ellipseBottomLeftG.contains(xBallFuture, yBallFuture)) {
			   if(xBall < xBallFuture) {
				   bouncePointBlock = new BouncePoint(xBall, yBall, BounceDirection.FLIP_X);
			   }
			   else {
				   bouncePointBlock = new BouncePoint(xBall, yBall, BounceDirection.FLIP_Y);
			   }
		   }
		   else if(ellipseBottomRightH.contains(xBallFuture, yBallFuture)) {
			   if(xBall < xBallFuture) {
				   bouncePointBlock = new BouncePoint(xBall, yBall, BounceDirection.FLIP_Y);
			   }
			   else {
				   bouncePointBlock = new BouncePoint(xBall, yBall, BounceDirection.FLIP_X);
			   }
		   }
		   else if(ellipseTopRightF.contains(xBallFuture, yBallFuture)) {
			   if(xBall < xBallFuture) {
				   bouncePointBlock = new BouncePoint(xBall, yBall, BounceDirection.FLIP_Y);
			   }
			   else {
				   bouncePointBlock = new BouncePoint(xBall, yBall, BounceDirection.FLIP_X);
			   }
		   }
	   }
	   return bouncePointBlock;

   }


  private void bounceBall() {
	double xBallFuture = this.currentBallX + (this.ballDirectionX)*getWaitTime();
	double yBallFuture = this.currentBallY + (this.ballDirectionY)*getWaitTime();
	double xBouncePosition = bounce.getX();
	double yBouncePosition = bounce.getY();
	double distanceX = Math.abs(xBallFuture - xBouncePosition);
	double distanceY = Math.abs(yBallFuture - yBouncePosition);
	if(xBouncePosition == xBallFuture && yBouncePosition == yBallFuture) {
		this.setCurrentBallX(xBallFuture);
		this.setCurrentBallY(yBallFuture);
	}
	else {
		if(bounce.getDirection() == BounceDirection.FLIP_BOTH) {
			if(Math.signum(this.getBallDirectionX() ) > 0) {
				this.setCurrentBallX(xBouncePosition - distanceX);
				this.setCurrentBallY(yBouncePosition + distanceY);
			}
			else {
				this.setCurrentBallX(xBouncePosition + distanceX);
				this.setCurrentBallY(yBouncePosition + distanceY);
			}
			this.setBallDirectionX(-1 * (ballDirectionX + Math.signum(ballDirectionX) * 0.1 * Math.abs(ballDirectionY)) );
			this.setBallDirectionY(-1 * (ballDirectionY + Math.signum(ballDirectionY) * 0.1 * Math.abs(ballDirectionX)) );
		}
		else if(bounce.getDirection() == BounceDirection.FLIP_X){
			if(Math.signum(this.getBallDirectionX() ) > 0) {
				this.setCurrentBallX(xBouncePosition - distanceX);
			}
			else {
				this.setCurrentBallX(xBouncePosition + distanceX);
			}
			this.setCurrentBallY(yBallFuture);
			this.setBallDirectionX(this.getBallDirectionX() * -1);
			this.setBallDirectionY(this.getBallDirectionY() + Math.signum(this.getBallDirectionY() * 0.1 + Math.abs(this.getBallDirectionX())));
		}
		else if(bounce.getDirection() == BounceDirection.FLIP_Y){
			if(Math.signum(this.getBallDirectionY() ) > 0) {
				this.setCurrentBallY(yBouncePosition - distanceY);
			}
			else {
				this.setCurrentBallY(yBouncePosition + distanceY);
			}
			this.setCurrentBallX(xBallFuture);
			this.setBallDirectionY(this.getBallDirectionY() * -1);
			this.setBallDirectionX(this.getBallDirectionX() + Math.signum(this.getBallDirectionX() * 0.1 + Math.abs(this.getBallDirectionY())));
		}
   }
}

  private boolean isOutOfBoundsAndLastLife() {
    boolean outOfBounds = false;
    
    if (lives == 1){
    	outOfBounds = this.isBallOutOfBounds();
    }	
    return outOfBounds;
  }
  
  private boolean isOutOfBounds() {
    boolean outOfBounds = this.isBallOutOfBounds();
    return outOfBounds;
  }
  
   private boolean hitLastBlockAndLastLevel() {
    Game game = this.getGame();
    	int nrLevels = game.numberOfLevels();
    	this.setBounce(null);
    	if(nrLevels==currentLevel){
    		int nrBlocks = this.numberOfBlocks();
    		if(nrBlocks ==1){
    			PlayedBlockAssignment block = this.getBlock(0);
    			BouncePoint bp = this.calculateBouncePointBlock(block);
    			this.setBounce(bp);
    			return bp != null;
    		}
    	}
    return false;
  }
  
  private boolean hitLastBlock(){
    int nrBlocks = this.numberOfBlocks();
    	this.setBounce(null);
    	if(nrBlocks == 1){
    		PlayedBlockAssignment block = this.getBlock(0);
    		BouncePoint bp = this.calculateBouncePointBlock(block);
    		this.setBounce(bp);
    		return bp != null;	
    	}
    return false;
  }
  
  private boolean hitBlock() {
    int nrBlocks = this.numberOfBlocks();
    	this.setBounce(null);
    	for(int i=0; i<nrBlocks; i++){
    		PlayedBlockAssignment block = getBlock(i);
    		BouncePoint bp = this.calculateBouncePointBlock(block);
    		BouncePoint bounce = this.getBounce();
    		boolean closer = this.isCloser(bp, bounce);
    		
    		if(closer){
    			this.setBounce(bp);
    		}   		
    	}
    	return this.getBounce() != null;
  }
  
  private boolean hitWall() {
  	BouncePoint bp = calculateBouncePointWall();
	if(bp != null) {
		setBounce(bp);
		return true;
	}
	return false;
  }
  
  // Actions
  
  private void doSetup(){
    // TODO implement
	   this.resetCurrentBallX();
	   this.resetCurrentBallY();
	   this.resetBallDirectionX();
	   this.resetBallDirectionY();
	   this.resetCurrentPaddleX();
	   Game game = this.getGame();
	   Level level = game.getLevel(currentLevel - 1);
	   List<BlockAssignment> assignments = level.getBlockAssignments();
	   for(BlockAssignment a : assignments) {
			 PlayedBlockAssignment pblock = new PlayedBlockAssignment(
					 Game.WALL_PADDING + (Block.SIZE + Game.COLUMNS_PADDING) * (a.getGridHorizontalPosition() - 1),
					 Game.WALL_PADDING + (Block.SIZE + Game.ROW_PADDING) * (a.getGridVerticalPosition() - 1), a.getBlock(),this);
	   }
	   int numberOfBlocks = assignments.size();
	   int maxHorizontal = (Game.PLAY_AREA_SIDE-2*Game.WALL_PADDING-Block.SIZE)/(Block.SIZE+Game.COLUMNS_PADDING);
	   int maxVertical = (Game.PLAY_AREA_SIDE-Paddle.VERTICAL_DISTANCE-Game.WALL_PADDING-Paddle.PADDLE_WIDTH-Ball.BALL_DIAMETER-Block.SIZE)/(Block.SIZE+Game.ROW_PADDING);
	   int x;
	   int y;
	   while(numberOfBlocks < game.getNrBlocksPerLevel() - 1) {
		   Random rand = new Random();
		   x = rand.nextInt(maxHorizontal);
		   y = rand.nextInt(maxVertical);
		   PlayedBlockAssignment foundAssignment = this.findPlayedBlockAssignment(x , y);
		   while(foundAssignment != null) {
			   if(y < maxVertical) {
				   if(x < maxHorizontal) {
					   x=x+1;
				   }
				   if(x >= maxHorizontal) {
					   x = 1;
					   y=y+1;
				   }
			   }
			   else if(y >= maxVertical) {
				   if(x < maxHorizontal) {
					   x=x+1;
				   }
				   if(x >= maxHorizontal) {
					   x = 1;
					   y = 1;
				   }
			   }
			   foundAssignment = this.findPlayedBlockAssignment(x , y);
		   }
		   x = Game.WALL_PADDING + (x-1)*(Game.COLUMNS_PADDING+Block.SIZE);
		   y = Game.WALL_PADDING + (y-1)*(Game.ROW_PADDING+Block.SIZE);
		   new PlayedBlockAssignment(x,y,game.getRandomBlock(),this);
		   numberOfBlocks++;
	   }
  }

  private PlayedBlockAssignment findPlayedBlockAssignment(int x, int y) {
	  Game game = this.getGame();
	  Level level = game.getLevel(currentLevel - 1);
	  List<BlockAssignment> assignments = level.getBlockAssignments();
	  for(BlockAssignment a : assignments) {
		 PlayedBlockAssignment pblock = new PlayedBlockAssignment(
				 Game.WALL_PADDING + (Block.SIZE + Game.COLUMNS_PADDING) * (a.getGridHorizontalPosition() - 1),
				 Game.WALL_PADDING + (Block.SIZE + Game.ROW_PADDING) * (a.getGridVerticalPosition() - 1), a.getBlock(),this);
		 int h = pblock.getX();
		 int v = pblock.getY();
		 if(h == x && v == y) {
			 return pblock;
		 }
	  }
		 return null;
  }

  private void doHitPaddleOrWall() {
    this.bounceBall();
  }

  private void doOutOfBounds() {
		this.setLives(lives-1);
		this.resetCurrentBallX();
		this.resetCurrentBallY();
		this.resetBallDirectionX();
		this.resetBallDirectionY();
		this.resetCurrentPaddleX();
  }

  private void doHitBlock() {
    int currentscore = this.getScore();
    BouncePoint bouncepoint = this.getBounce();
    PlayedBlockAssignment playedblock = bouncepoint.getHitBlock();
    Block block = playedblock.getBlock();
    int blockscore = block.getPoints();
    this.setScore(currentscore + blockscore);
    playedblock.delete();
    this.bounceBall();
  }

  private void doHitBlockNextLevel() {
    this.doHitBlock();
    int level = this.getCurrentLevel();
    this.setCurrentPaddleLength(this.getGame().getPaddle().getMaxPaddleLength()-(this.getGame().getPaddle().getMaxPaddleLength()
    							-this.getGame().getPaddle().getMinPaddleLength())/(this.getGame().numberOfLevels())*(this.getCurrentLevel()));
    this.setWaitTime(INITIAL_WAIT_TIME*Math.pow(this.getGame().getBall().getBallSpeedIncreaseFactor(),(double)(this.getCurrentLevel())));
    this.setCurrentLevel(level+1);
  }

  private void doHitNothingAndNotOutOfBounds() {
    PlayedGame currentPlayedGame = Block223Application.getCurrentPlayableGame();
	double x = currentPlayedGame.getCurrentBallX();
	double y = currentPlayedGame.getCurrentBallY();
	double dx = currentPlayedGame.getBallDirectionX();
	double dy = currentPlayedGame.getBallDirectionY();
	currentPlayedGame.setCurrentBallX(x + dx);
	currentPlayedGame.setCurrentBallY(y + dy);
  }

  private void doGameOver() {
    Block223 block223 = this.getBlock223();
    Player p = this.getPlayer();
    if (p != null){
    	game = this.getGame();
    	HallOfFameEntry hof = new HallOfFameEntry(score, playername, p, game, block223);
    	game.setMostRecentEntry(hof);
    }
    this.delete();
  }

}
