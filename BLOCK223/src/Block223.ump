namespace ca.mcgill.ecse223.block.model;

use Block223PlayMode.ump;
use Block223Persistence.ump;
use Block223States.ump;
use Block223TransferObjectsPlayMode.ump;

class Block223 {
   1 <@>- * User users;
   1 <@>- * UserRole roles;
   1 <@>- * Game games; 
   public Game findGame(String name) {
	  for (Game game: getGames()) {
		  if (game.getName().equals(name)) {
			  return game;
		  }
	  }
	  return null;
  }
}

class User {
   unique username;
   1 -> 1..2 UserRole roles;
   public static String findUsername(UserRole admin) {
      return admin.getUsername();
  }
}

class UserRole {
   abstract;
   password;
   public String getUsername() {
      return super.toString();
   }
}

class Admin {
   isA UserRole;
}

class Player {
   isA UserRole;
}

class Game {
   const Integer MIN_NR_LEVELS = 1;
   const Integer MAX_NR_LEVELS = 99; // this is somewhat redundant because the max multiplicity is enforced by Umple
   const Integer PLAY_AREA_SIDE = 390; // play area is now constant
   const Integer WALL_PADDING = 10;
   const Integer COLUMNS_PADDING = 5;
   const Integer ROW_PADDING = 2;
   unique name;
   before constructor, setName {
   	  Block223 block223 = getBlock223();
	  if (aName == null || aName.length() == 0) {
	     throw new RuntimeException("The name of a game must be specified.");
	  }
   }
   Integer nrBlocksPerLevel;
   before constructor, setNrBlocksPerLevel {
     if (aNrBlocksPerLevel <= 0) {
     	throw new RuntimeException("The number of blocks per level must be greater than zero.");
     }
   }
   before getLevel {
     if (index < 0 || index > 98){
   	  throw new IndexOutOfBoundsException("Level must be between 1 and 99 inclusively.");
   	  }
   }
   public Block findBlock(int id) {
	  List<Block> blocks = this.getBlocks();
	  for (Block block : blocks) {
		  int blockId = block.getId();
		  if (id == blockId) {
			  return block;
		  }
	  }
	  return null;
  }
   * -- 1 Admin admin;
   1 <@>- * Block blocks;
   1 <@>- 1..99 Level levels;
   1 <@>- * BlockAssignment blockAssignments;
   1 <@>- 1 Ball ball;
   1 <@>- 1 Paddle paddle;
}

class Block {
   const Integer MIN_COLOR = 0;
   const Integer MAX_COLOR = 255;
   const Integer MIN_POINTS = 1;
   const Integer MAX_POINTS = 1000; 
   const Integer SIZE = 20;
   autounique id;
   Integer red;
   Integer green;
   Integer blue;
   Integer points;
   
   before constructor {
   	if (aRed < 0 || aRed > 255) {
	  	throw new RuntimeException("Red must be between 0 and 255.");
	}
	if (aGreen < 0 || aGreen > 255) {
	  	throw new RuntimeException("Green must be between 0 and 255.");
	}
	if (aBlue < 0 || aBlue > 255) {
	  	throw new RuntimeException("Blue must be between 0 and 255.");
	}
	if(aPoints < 1 || aPoints > 1000){
		throw new RuntimeException("Points must be between 1 and 1000.");
	}
   }
   before setRed {
   	if (aRed < 0 || aRed > 255) {
	  	throw new RuntimeException("Red must be between 0 and 255.");
	}
   }
   before setGreen {
   	if (aGreen < 0 || aGreen > 255) {
	  	throw new RuntimeException("Green must be between 0 and 255.");
	}
   }
   before setBlue {
   	if (aBlue < 0 || aBlue > 255) {
	  	throw new RuntimeException("Blue must be between 0 and 255.");
	}
   }
   before setPoints {
   	if (aPoints < 0 || aPoints > 255) {
	  	throw new RuntimeException("Points must be between 1 and 1000.");
	}
   }
}

// random attribute not needed anymore
// Each level is filled up with random blocks just before playing the level to reach the nrBlocksPerLevel defined in Game
class Level {
	public BlockAssignment findBlockAssignment (int gridHorizontalPosition, int gridVerticalPosition) {	
		for (BlockAssignment assignment : this.getBlockAssignments()) {
			int h = assignment.getGridHorizontalPosition();
			int v = assignment.getGridVerticalPosition();
			if(h == gridHorizontalPosition && v == gridVerticalPosition)
			{
				return assignment;
			}
		}
	return null;
  } 
}

class BlockAssignment {
   Integer gridHorizontalPosition;
   Integer gridVerticalPosition;
   * -- 1 Level level;
   * -- 1 Block block;
}

class Ball {
   const Integer BALL_DIAMETER = 10;
   Integer minBallSpeedX;
   Integer minBallSpeedY;
   before constructor, setMinBallSpeedX {
     if (aMinBallSpeedX < 0) {
     	throw new RuntimeException("The minimum speed of the ball must be greater than zero.");
     }
   } 
   before constructor, setMinBallSpeedY {
     if (aMinBallSpeedY < 0) {
     	throw new RuntimeException("The minimum speed of the ball must be greater than zero.");
     }
   }
   Double ballSpeedIncreaseFactor;
   before constructor, setBallSpeedIncreaseFactor {
     if (aBallSpeedIncreaseFactor <= 0) {
     	throw new RuntimeException("The speed increase factor of the ball must be greater than zero.");
     }
   }
}

class Paddle {
   const Integer PADDLE_WIDTH = 5;
   const Integer VERTICAL_DISTANCE = 30;
   Integer maxPaddleLength;
   before constructor, setMaxPaddleLength {
     if (aMaxPaddleLength <= 0 || aMaxPaddleLength > 390) {
     	throw new RuntimeException("The maximum length of the paddle must be greater than zero and less than or equal to 390.");
     }
   }
   Integer minPaddleLength;
   before constructor, setMinPaddleLength {
     if (aMinPaddleLength <= 0) {
     	throw new RuntimeException("The minimum length of the paddle must be greater than zero.");
     }
   }
}
