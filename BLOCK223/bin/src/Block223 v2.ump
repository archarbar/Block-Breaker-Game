namespace ca.mcgill.ecse223.block.model;

//use Block223Persistence.ump;

class Block223 {
   1 <@>- * User users;
   1 <@>- * UserRole roles;
   1 <@>- * Game games;
   
   public Game findGame(String name) {
	  for (Game game: getGames()) {
		  if (game.getName() == name) {
			  return game;
		  }
	  }
	  return null;
  }
}

class User {
   unique username;
   1 -> 1..2 UserRole roles;
}

class UserRole {
   abstract;
   password;
}

class Admin {
   isA UserRole;
}

class Player {
   isA UserRole;
}

class Game {
   const Integer MIN_NR_LEVELS = 1;
   const Integer MAX_NR_LEVELS = 99; // this is somewhat redundant because the max multiplicity is enforced by Umple
   const Integer PLAY_AREA_SIDE = 400; // play area is now constant
   const Integer WALL_PADDING = 10;
   const Integer COLUMNS_PADDING = 5;
   const Integer ROW_PADDING = 2;
   unique name;
   before constructor, setName {
   	  if (findGame(aName == null)) {
   	  	 throw new RuntimeException("The name of a game must be unique");
   	  }
	  if (aName == null || aName.length() == 0) {
	     throw new RuntimeException("The name of a game must be specified");
	  }
   }
   Integer nrBlocksPerLevel;
   before constructor, setNrBlocksPerLevel {
     if (aNrBlocksPerLevel <= 0) {
     	throw new RuntimeException("The number of blocks per level must be greater than zero");
     }
   }
   * -- 1 Admin admin;
   1 <@>- * Block blocks;
   1 <@>- 1..99 Level levels;
   1 <@>- * BlockAssignment blockAssignments;
   1 <@>- 1 Ball ball;
   1 <@>- 1 Paddle paddle;
}

class Block {
   const Integer MIN_COLOR = 0;
   const Integer MAX_COLOR = 255;
   const Integer MIN_POINTS = 1;
   const Integer MAX_POINTS = 1000; 
   const Integer SIZE = 20;
   autounique id;
   Integer red;
   Integer green;
   Integer blue;
   Integer points;
}

// random attribute not needed anymore
// Each level is filled up with random blocks just before playing the level to reach the nrBlocksPerLevel defined in Game
class Level {
   public BlockAssignment findBlockAssignment (int gridHorizontalPosition, int gridVerticalPosition) {
		List<BlockAssignment> assignments = getBlockAssignments();					
				for (BlockAssignment assignment : assignments) {
					Integer h= assignment.getGridHorizontalPosition();
					Integer v= assignment.getGridVerticalPosition();
					if(h == gridHorizontalPosition && v==gridVerticalPosition) {
						return assignment;}
				}		
		return null;
		}
 		
}

class BlockAssignment {
   Integer gridHorizontalPosition;
   Integer gridVerticalPosition;
   * -- 1 Level level;
   * -- 1 Block block;
}

class Ball {
   const Integer BALL_DIAMETER = 10;
   Integer minBallSpeedX;
   before constructor, setMinBallSpeedX {
     if (aMinBallSpeedX <= 0) {
     	throw new RuntimeException("The minimum speed of the ball must be greater than zero");
     }
   } 
   Integer minBallSpeedY;
   before constructor, setMinBallSpeedY {
     if (aMinBallSpeedY <= 0) {
     	throw new RuntimeException("The minimum speed of the ball must be greater than zero");
     }
   }
   Double ballSpeedIncreaseFactor;
   before constructor, setBallSpeedIncreaseFactor {
     if (aBallSpeedIncreaseFactor <= 0) {
     	throw new RuntimeException("The speed increase factor of the ball must be greater than zero");
     }
   }
}

class Paddle {
   const Integer PADDLE_WIDTH = 5;
   const Integer VERTICAL_DISTANCE = 30;
   Integer maxPaddleLength;
   before constructor, setMaxPaddleLength {
     if (aMaxPaddleLength <= 0 || aMaxPaddleLength > 400) {
     	throw new RuntimeException("The maximum length of the paddle must be greater than zero and less than or equal to 400");
     }
   }
   Integer minPaddleLength;
   before constructor, setMinPaddleLength {
     if (aMinPaddleLength <= 0) {
     	throw new RuntimeException("The minimum length of the paddle must be greater than zero");
     }
   }
}